<!DOCTYPE html>
<html>
<title>Hashnav.</title>
<meta http-equiv="Content-Type" content="text/html;charset=UTF-8"/>
<meta name="keywords" content="python web application" />
<meta name="description" content="pyramid web application" />
<head>
<script type="text/javascript" src="http://mbostock.github.com/d3/d3.js"></script>
<script type="text/javascript" src="http://mbostock.github.com/d3/d3.layout.js"></script>
<script type="text/javascript" src="http://mbostock.github.com/d3/d3.geom.js"></script>
<style type="text/css">
.link { stroke: #ccc; }
.nodetext { pointer-events: none; font: 10px sans-serif; }
.nodecircle { stroke-width: 2px; stroke: #ccc }
.nodeuser { fill: #1B9623 } 
.nodetag { fill: #231B96 } 
.nodeurl { fill: #96231B }
</style>
</head>
<body>
<script type="text/javascript">

var typeclass = { user: "nodeuser", url: "nodeurl", tag: "nodetag" };
var testtypes = ["nodeuser", "nodeurl", "nodetag", "", "", "", "","","","","","","","","","","","","",""];
var vis; 
var force, link, node;
var w = 700,
    h = 500;

function resize() {
// get the size of the window from the browser and use that
    if (document.body && document.body.offsetWidth) {
        w = document.body.offsetWidth;
        h = document.body.offsetHeight;
    }
    if (document.compatMode=='CSS1Compat' &&
        document.documentElement &&
        document.documentElement.offsetWidth ) {
        w = document.documentElement.offsetWidth;
        h = document.documentElement.offsetHeight;
    }
    if (window.innerWidth && window.innerHeight) {
        w = window.innerWidth;
        h = window.innerHeight;
    }
// cheap hack to get rid of scroll bars
    w = w-22;
    h = h-62;

    vis = d3.select("body").append("svg:svg")
        .attr("width", w)
        .attr("height", h);
}

// not really necessary, but allowed for debug/output instead of just 
// using encodeURIComponent()
function get_clean_uri(i) {
    //document.write(i);
    var user_input = encodeURIComponent(i);
    return user_input;
}

// every time we remove the current graph from the screen, we'll check to
// see if the window has been resized and adjust for it
function remove_current_graph() {
    vis.data([]);
    link.remove();
    node.remove();
    vis.remove();
    resize();
}

// called from the click event on a node.
function new_graph_from_click() {
    var n = d3.select(this).text();
    remove_current_graph();
    make_graph(get_clean_uri(n)); 
}

//d3.json("graph.json", function(json) {
//d3.json("${request.static_url('hwebapp:static/data/graphExample.json')}", function(json) {

function make_graph(query) {
var queryurl = "${request.host_url}/api/tag/"+query+"/neighborhood";
d3.json(queryurl, function(json) {
    force = self.force = d3.layout.force()
        .nodes(json.nodes)
        .links(json.links)
        .gravity(.15)
        .friction(.3)
        .distance(140)
        .charge(-80)
        .size([w, h])
        .start();

    link = vis.selectAll("line.link")
        .data(json.links)
        .enter().append("svg:line")
        .attr("class", "link")
        .attr("x1", function(d) { return d.source.x; })
        .attr("y1", function(d) { return d.source.y; })
        .attr("x2", function(d) { return d.target.x; })
        .attr("y2", function(d) { return d.target.y; });

    node = vis.selectAll("g.node")
        .data(json.nodes)
        .enter().append("svg:g")
        .attr("class", "node")
        .on("click", new_graph_from_click) 
        .call(force.drag);

    node.append("svg:circle")
        .attr("class", function(d) { return "nodecircle " + testtypes[d.group]; })
        .attr("r", "8px");

    node.append("svg:text")
        .attr("class", "nodetext")
        .attr("dx", 12)
        .attr("dy", ".35em")
        .text(function(d) { return d.name });

    force.on("tick", function() {
      link.attr("x1", function(d) { return d.source.x; })
          .attr("y1", function(d) { return d.source.y; })
          .attr("x2", function(d) { return d.target.x; })
          .attr("y2", function(d) { return d.target.y; });

      node.attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });
    });
})};

</script>

<form name="query_form" action="" onsubmit="remove_current_graph(); make_graph(get_clean_uri(this.form.query_text.value))">
    <input type=text size=20 name=query_text />
    <button type="button" onclick="remove_current_graph(); make_graph(get_clean_uri(this.form.query_text.value))"> go! </button>
    <!-- I couldn't get the html onsubmit event to work so for now the button
        above will have to work. -->
    <input type="submit" value="html-version!">
</form>

<script type="text/javascript">
    // initialize the graph with #social as the query
    resize();
    make_graph(get_clean_uri('#social'));
</script>

</body>
</html>

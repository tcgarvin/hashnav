<!DOCTYPE html>
<html>
<title>Hashnav</title>
<meta http-equiv="Content-Type" content="text/html;charset=UTF-8"/>
<meta name="keywords" content="python web application" />
<meta name="description" content="pyramid web application" />
<head>
<script type="text/javascript" src="http://mbostock.github.com/d3/d3.js"></script>
<script type="text/javascript" src="http://mbostock.github.com/d3/d3.layout.js"></script>
<script type="text/javascript" src="http://mbostock.github.com/d3/d3.geom.js"></script>
<style type="text/css">
.link { stroke: #ccc; }
.nodetext { pointer-events: none; font: 10px sans-serif; }
.nodecircle { stroke-width: 2px; stroke: #ccc }
.nodeuser { fill: #1B9623 }
.nodetag { fill: #231B96 }
.nodeurl { fill: #96231B }
</style>
</head>
<body>
<script type="text/javascript">

var typeclass = { user: "nodeuser", url: "nodeurl", tag: "nodetag" };
var testtypes = ["nodeuser", "nodeurl", "nodetag", "", "", "", "","","","","","","","","","","","","",""];

var w = 700,
    h = 500;

// get the size of the window from the browser and use that
    if (document.body && document.body.offsetWidth) {
        w = document.body.offsetWidth;
        h = document.body.offsetHeight;
    }
    if (document.compatMode=='CSS1Compat' &&
        document.documentElement &&
        document.documentElement.offsetWidth ) {
        w = document.documentElement.offsetWidth;
        h = document.documentElement.offsetHeight;
    }
    if (window.innerWidth && window.innerHeight) {
        w = window.innerWidth;
        h = window.innerHeight;
    }
// cheap hack to get rid of scroll bars
    w = w-20;
    h = h-20;
//document.writeln('Window width = '+w);
//document.writeln('Window height = '+h);

var vis = d3.select("body").append("svg:svg")
.attr("width", w)
.attr("height", h);

//d3.json("graph.json", function(json) {
//d3.json("${request.static_url('hwebapp:static/data/graphExample.json')}", function(json) {

var queryurl = "${request.host_url}/api/tag/${search_term}/neighborhood";
d3.json(queryurl, function(json) {
    var force = self.force = d3.layout.force()
        .nodes(json.nodes)
        .links(json.links)
        .gravity(.05)
        .distance(100)
        .charge(-100)
        .size([w, h])
        .start();

    var link = vis.selectAll("line.link")
        .data(json.links)
        .enter().append("svg:line")
        .attr("class", "link")
        .attr("x1", function(d) { return d.source.x; })
        .attr("y1", function(d) { return d.source.y; })
        .attr("x2", function(d) { return d.target.x; })
        .attr("y2", function(d) { return d.target.y; });

    var node = vis.selectAll("g.node")
        .data(json.nodes)
      .enter().append("svg:g")
        .attr("class", "node")
        .call(force.drag);

    node.append("svg:circle")
        .attr("class", function(d) { return "nodecircle " + testtypes[d.group]; })
        .attr("r", "8px");

    node.append("svg:text")
        .attr("class", "nodetext")
        .attr("dx", 12)
        .attr("dy", ".35em")
        .text(function(d) { return d.name });

    force.on("tick", function() {
      link.attr("x1", function(d) { return d.source.x; })
          .attr("y1", function(d) { return d.source.y; })
          .attr("x2", function(d) { return d.target.x; })
          .attr("y2", function(d) { return d.target.y; });

      node.attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });
    });
});

</script>
</body>
</html>
